/*!
*  filename: ej2-data.umd.min.js.map
*  version : 15.4.22
*  Copyright Syncfusion Inc. 2001 - 2017. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-data.umd.min.js","sources":["src/es5/query.js","src/es5/util.js","src/es5/adaptors.js","src/es5/manager.js"],"sourcesContent":["import { DataUtil } from './util';\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nvar Query = /** @class */ (function () {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    function Query(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    Query.prototype.setKey = function (field) {\n        this.key = field;\n        return this;\n    };\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    Query.prototype.using = function (dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    };\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    Query.prototype.execute = function (dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    };\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    Query.prototype.executeLocal = function (dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    };\n    /**\n     * Creates deep copy of the Query object.\n     */\n    Query.prototype.clone = function () {\n        var cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        return cloned;\n    };\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    Query.prototype.from = function (tableName) {\n        this.fromTable = tableName;\n        return this;\n    };\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    Query.prototype.addParams = function (key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    };\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    Query.prototype.expand = function (tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    };\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    Query.prototype.where = function (fieldName, operator, value, ignoreCase) {\n        operator = operator ? (operator).toLowerCase() : null;\n        var predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    };\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    Query.prototype.search = function (searchKey, fieldNames, operator, ignoreCase) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        operator = operator || 'contains';\n        var comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                comparer: comparer\n            }\n        });\n        return this;\n    };\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    Query.prototype.sortBy = function (fieldName, comparer, isFromGroup) {\n        var order = 'ascending';\n        var sorts;\n        var temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (var i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (var j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    };\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    Query.prototype.sortByDesc = function (fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    };\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    Query.prototype.group = function (fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    };\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    Query.prototype.page = function (pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    };\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    Query.prototype.range = function (start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    };\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    Query.prototype.take = function (nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    };\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    Query.prototype.skip = function (nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    };\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    Query.prototype.select = function (fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    };\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    Query.prototype.hierarchy = function (query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    };\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    Query.prototype.foreignKey = function (key) {\n        this.fKey = key;\n        return this;\n    };\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    Query.prototype.requiresCount = function () {\n        this.isCountRequired = true;\n        return this;\n    };\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    Query.prototype.aggregate = function (type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    };\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    Query.filterQueries = function (queries, name) {\n        return queries.filter(function (q) {\n            return q.fn === name;\n        });\n    };\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    Query.filterQueryLists = function (queries, singles) {\n        var filtered = queries.filter(function (q) {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        var res = {};\n        for (var i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    };\n    return Query;\n}());\nexport { Query };\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nvar Predicate = /** @class */ (function () {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    function Predicate(field, operator, value, ignoreCase) {\n        if (ignoreCase === void 0) { ignoreCase = false; }\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    Predicate.and = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    };\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    Predicate.prototype.and = function (field, operator, value, ignoreCase) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase);\n    };\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    Predicate.or = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    };\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    Predicate.prototype.or = function (field, operator, value, ignoreCase) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase);\n    };\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    Predicate.fromJson = function (json) {\n        if (json instanceof Array) {\n            var res = [];\n            for (var i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        var pred = json;\n        return this.fromJSONData(pred);\n    };\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    Predicate.prototype.validate = function (record) {\n        var predicate = this.predicates ? this.predicates : [];\n        var isAnd;\n        var ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase);\n        }\n        isAnd = this.condition === 'and';\n        for (var i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    };\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    Predicate.prototype.toJson = function () {\n        var predicates;\n        var p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (var i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            condition: this.condition,\n            predicates: predicates\n        };\n    };\n    Predicate.combinePredicates = function (predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    };\n    Predicate.combine = function (pred, field, operator, value, condition, ignoreCase) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    };\n    Predicate.fromJSONData = function (json) {\n        var preds = json.predicates || [];\n        var len = preds.length;\n        var predicates = [];\n        var result;\n        for (var i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    };\n    return Predicate;\n}());\nexport { Predicate };\n","import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager } from './manager';\nimport { Query } from './query';\nvar consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nvar DataUtil = /** @class */ (function () {\n    function DataUtil() {\n    }\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    DataUtil.getValue = function (value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    };\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    DataUtil.endsWith = function (input, substr) {\n        return input.slice(-substr.length) === substr;\n    };\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    DataUtil.startsWith = function (input, start) {\n        return input.slice(0, start.length) === start;\n    };\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    DataUtil.fnSort = function (order) {\n        order = order ? order.toLowerCase() : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    };\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    DataUtil.fnAscending = function (x, y) {\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    };\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    DataUtil.fnDescending = function (x, y) {\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    };\n    DataUtil.extractFields = function (obj, fields) {\n        var newObj = {};\n        if (fields.length === 1) {\n            return this.getObject(fields[0], obj);\n        }\n        for (var i = 0; i < fields.length; i++) {\n            newObj[fields[i].replace('.', '_')] = this.getObject(fields[i], obj);\n        }\n        return newObj;\n    };\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    DataUtil.select = function (jsonArray, fields) {\n        var newData = [];\n        for (var i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    };\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    DataUtil.group = function (jsonArray, field, aggregates, level, groupDs, format) {\n        level = level || 1;\n        var jsonData = jsonArray;\n        var guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            var _loop_1 = function (j) {\n                if (!isNullOrUndefined(groupDs)) {\n                    var indx = -1;\n                    var temp = groupDs.filter(function (e) { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            };\n            var this_1 = this;\n            for (var j = 0; j < jsonData.length; j++) {\n                _loop_1(j);\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        var grouped = {};\n        var groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        var _loop_2 = function (i) {\n            var val = this_2.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    var tempObj = groupDs.filter(function (e) { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            grouped[val].items.push(jsonData[i]);\n        };\n        var this_2 = this;\n        for (var i = 0; i < jsonData.length; i++) {\n            _loop_2(i);\n        }\n        if (aggregates && aggregates.length) {\n            var _loop_3 = function (i) {\n                var res = {};\n                var fn = void 0;\n                var aggs = aggregates;\n                for (var j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        var temp = groupDs.filter(function (e) { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            };\n            for (var i = 0; i < groupedArray.length; i++) {\n                _loop_3(i);\n            }\n        }\n        return groupedArray;\n    };\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    DataUtil.buildHierarchy = function (fKey, from, source, lookup, pKey) {\n        var i;\n        var grp = {};\n        var temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            var fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            var fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    };\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    DataUtil.getFieldList = function (obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        var copyObj = obj;\n        var keys = Object.keys(obj);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var prop = keys_1[_i];\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    };\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    DataUtil.getObject = function (nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        var value = from;\n        var splits = nameSpace.split('.');\n        for (var i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    };\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    DataUtil.sort = function (ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        var middle = parseInt((ds.length / 2).toString(), 10);\n        var left = ds.slice(0, middle);\n        var right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    };\n    DataUtil.merge = function (left, right, fieldName, comparer) {\n        var result = [];\n        var current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName)) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    };\n    DataUtil.getVal = function (array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    };\n    DataUtil.toLowerCase = function (val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    };\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    DataUtil.callAdaptorFunction = function (adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            var res = adaptor[fnName](param1, param2);\n            if (!this.fnOperators.isnull(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    };\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    DataUtil.isPlainObject = function (obj) {\n        return (!!obj) && (obj.constructor === Object);\n    };\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    DataUtil.isCors = function () {\n        var xhr = null;\n        var request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    };\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    DataUtil.getGuid = function (prefix) {\n        var hexs = '0123456789abcdef';\n        var rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                var arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    };\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    DataUtil.isNull = function (val) {\n        return val === undefined || val === null;\n    };\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    DataUtil.getItemFromComparer = function (array, field, comparer) {\n        var keyVal;\n        var current;\n        var key;\n        var i = 0;\n        var castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    };\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    DataUtil.distinct = function (json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        var result = [];\n        var val;\n        var tmp = {};\n        json.forEach(function (data, index) {\n            val = DataUtil.getVal(json, index, fieldName);\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    };\n    /**\n     * Specifies the value which will be used to adjust the date value to server timezone.\n     * @default 0\n     */\n    DataUtil.serverTimezoneOffset = 0;\n    /**\n     * Throw error with the given string as message.\n     * @param  {string} er\n     */\n    DataUtil.throwError = function (error) {\n        try {\n            throw new Error(error);\n        }\n        catch (e) {\n            throw e.message + '\\n' + e.stack;\n        }\n    };\n    DataUtil.aggregates = {\n        /**\n         * Calculate sum of the given field in the data.\n         * @param  {Object[]} ds\n         * @param  {string} field\n         */\n        sum: function (ds, field) {\n            var result = 0;\n            var val;\n            var castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n            for (var i = 0; i < ds.length; i++) {\n                val = DataUtil.getVal(ds, i, field);\n                if (!isNaN(val) && val !== null) {\n                    if (castRequired) {\n                        val = +val;\n                    }\n                    result += val;\n                }\n            }\n            return result;\n        },\n        /**\n         * Calculate average value of the given field in the data.\n         * @param  {Object[]} ds\n         * @param  {string} field\n         */\n        average: function (ds, field) {\n            return DataUtil.aggregates.sum(ds, field) / ds.length;\n        },\n        /**\n         * Returns the min value of the data based on the field.\n         * @param  {Object[]} ds\n         * @param  {string|Function} field\n         */\n        min: function (ds, field) {\n            var comparer;\n            if (typeof field === 'function') {\n                comparer = field;\n                field = null;\n            }\n            return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n        },\n        /**\n         * Returns the max value of the data based on the field.\n         * @param  {Object[]} ds\n         * @param  {string} field\n         * @returns number\n         */\n        max: function (ds, field) {\n            var comparer;\n            if (typeof field === 'function') {\n                comparer = field;\n                field = null;\n            }\n            return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n        },\n        /**\n         * Returns the total number of true value present in the data based on the given boolean field name.\n         * @param  {Object[]} ds\n         * @param  {string} field\n         */\n        truecount: function (ds, field) {\n            return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n        },\n        /**\n         * Returns the total number of false value present in the data based on the given boolean field name.\n         * @param  {Object[]} ds\n         * @param  {string} field\n         */\n        falsecount: function (ds, field) {\n            return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n        },\n        /**\n         * Returns the length of the given data.\n         * @param  {Object[]} ds\n         * @param  {string} field?\n         * @returns number\n         */\n        count: function (ds, field) {\n            return ds.length;\n        }\n    };\n    /**\n     * Specifies the Object with filter operators.\n     */\n    DataUtil.operatorSymbols = {\n        '<': 'lessthan',\n        '>': 'greaterthan',\n        '<=': 'lessthanorequal',\n        '>=': 'greaterthanorequal',\n        '==': 'equal',\n        '!=': 'notequal',\n        '*=': 'contains',\n        '$=': 'endswith',\n        '^=': 'startswith'\n    };\n    /**\n     * Specifies the Object with filter operators which will be used for OData filter query generation.\n     * * It will be used for date/number type filter query.\n     */\n    DataUtil.odBiOperator = {\n        '<': ' lt ',\n        '>': ' gt ',\n        '<=': ' le ',\n        '>=': ' ge ',\n        '==': ' eq ',\n        '!=': ' ne ',\n        'lessthan': ' lt ',\n        'lessthanorequal': ' le ',\n        'greaterthan': ' gt ',\n        'greaterthanorequal': ' ge ',\n        'equal': ' eq ',\n        'notequal': ' ne '\n    };\n    /**\n     * Specifies the Object with filter operators which will be used for OData filter query generation.\n     * It will be used for string type filter query.\n     */\n    DataUtil.odUniOperator = {\n        '$=': 'endswith',\n        '^=': 'startswith',\n        '*=': 'substringof',\n        'endswith': 'endswith',\n        'startswith': 'startswith',\n        'contains': 'substringof'\n    };\n    /**\n     * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n     * It will be used for string type filter query.\n     */\n    DataUtil.odv4UniOperator = {\n        '$=': 'endswith',\n        '^=': 'startswith',\n        '*=': 'contains',\n        'endswith': 'endswith',\n        'startswith': 'startswith',\n        'contains': 'contains'\n    };\n    DataUtil.fnOperators = {\n        /**\n         * Returns true when the actual input is equal to the given input.\n         * @param  {string|number|boolean} actual\n         * @param  {string|number|boolean} expected\n         * @param  {boolean} ignoreCase?\n         */\n        equal: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n            }\n            return actual === expected;\n        },\n        /**\n         * Returns true when the actual input is not equal to the given input.\n         * @param  {string|number|boolean} actual\n         * @param  {string|number|boolean} expected\n         * @param  {boolean} ignoreCase?\n         */\n        notequal: function (actual, expected, ignoreCase) {\n            return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n        },\n        /**\n         * Returns true when the actual input is less than to the given input.\n         * @param  {string|number|boolean} actual\n         * @param  {string|number|boolean} expected\n         * @param  {boolean} ignoreCase?\n         */\n        lessthan: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n            }\n            return actual < expected;\n        },\n        /**\n         * Returns true when the actual input is greater than to the given input.\n         * @param  {string|number|boolean} actual\n         * @param  {string|number|boolean} expected\n         * @param  {boolean} ignoreCase?\n         */\n        greaterthan: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n            }\n            return actual > expected;\n        },\n        /**\n         * Returns true when the actual input is less than or equal to the given input.\n         * @param  {string|number|boolean} actual\n         * @param  {string|number|boolean} expected\n         * @param  {boolean} ignoreCase?\n         */\n        lessthanorequal: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n            }\n            return actual <= expected;\n        },\n        /**\n         * Returns true when the actual input is greater than or equal to the given input.\n         * @param  {string|number|boolean} actual\n         * @param  {string|number|boolean} expected\n         * @param  {boolean} ignoreCase?\n         */\n        greaterthanorequal: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n            }\n            return actual >= expected;\n        },\n        /**\n         * Returns true when the actual input contains the given string.\n         * @param  {string|number} actual\n         * @param  {string|number} expected\n         * @param  {boolean} ignoreCase?\n         */\n        contains: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                    DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n            }\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                actual.toString().indexOf(expected) !== -1;\n        },\n        /**\n         * Returns true when the given input value is not null.\n         * @param  {string|number} actual\n         * @returns boolean\n         */\n        notnull: function (actual) {\n            return actual !== null;\n        },\n        /**\n         * Returns true when the given input value is null.\n         * @param  {string|number} actual\n         * @returns boolean\n         */\n        isnull: function (actual) {\n            return actual === null;\n        },\n        /**\n         * Returns true when the actual input starts with the given string\n         * @param  {string} actual\n         * @param  {string} expected\n         * @param  {boolean} ignoreCase?\n         */\n        startswith: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return actual && expected && DataUtil.startsWith(actual.toLowerCase(), expected.toLowerCase());\n            }\n            return actual && expected && DataUtil.startsWith(actual, expected);\n        },\n        /**\n         * Returns true when the actual input ends with the given string.\n         * @param  {string} actual\n         * @param  {string} expected\n         * @param  {boolean} ignoreCase?\n         */\n        endswith: function (actual, expected, ignoreCase) {\n            if (ignoreCase) {\n                return actual && expected && DataUtil.endsWith(actual.toLowerCase(), expected.toLowerCase());\n            }\n            return actual && expected && DataUtil.endsWith(actual, expected);\n        },\n        /**\n         * It will return the filter operator based on the filter symbol.\n         * @param  {string} operator\n         * @hidden\n         */\n        processSymbols: function (operator) {\n            var fnName = DataUtil.operatorSymbols[operator];\n            if (fnName) {\n                var fn = DataUtil.fnOperators[fnName];\n                return fn;\n            }\n            return DataUtil.throwError('Query - Process Operator : Invalid operator');\n        },\n        /**\n         * It will return the valid filter operator based on the specified operators.\n         * @param  {string} operator\n         * @hidden\n         */\n        processOperator: function (operator) {\n            var fn = DataUtil.fnOperators[operator];\n            if (fn) {\n                return fn;\n            }\n            return DataUtil.fnOperators.processSymbols(operator);\n        }\n    };\n    /**\n     * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n     */\n    DataUtil.parse = {\n        /**\n         * Parse the given string to the plain JavaScript object.\n         * @param  {string|Object|Object[]} jsonText\n         */\n        parseJson: function (jsonText) {\n            if (typeof jsonText === 'string') {\n                jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n            }\n            else if (jsonText instanceof Array) {\n                DataUtil.parse.iterateAndReviveArray(jsonText);\n            }\n            else if (typeof jsonText === 'object') {\n                DataUtil.parse.iterateAndReviveJson(jsonText);\n            }\n            return jsonText;\n        },\n        /**\n         * It will perform on array of values.\n         * @param  {string[]|Object[]} array\n         * @hidden\n         */\n        iterateAndReviveArray: function (array) {\n            for (var i = 0; i < array.length; i++) {\n                if (typeof array[i] === 'object') {\n                    DataUtil.parse.iterateAndReviveJson(array[i]);\n                }\n                else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{|\\\"/g.test(array[i])) {\n                    array[i] = DataUtil.parse.jsonReviver('', array[i]);\n                }\n                else {\n                    array[i] = DataUtil.parse.parseJson(array[i]);\n                }\n            }\n        },\n        /**\n         * It will perform on JSON values\n         * @param  {JSON} json\n         * @hidden\n         */\n        iterateAndReviveJson: function (json) {\n            var value;\n            var keys = Object.keys(json);\n            for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n                var prop = keys_2[_i];\n                if (DataUtil.startsWith(prop, '__')) {\n                    continue;\n                }\n                value = json[prop];\n                if (typeof value === 'object') {\n                    if (value instanceof Array) {\n                        DataUtil.parse.iterateAndReviveArray(value);\n                    }\n                    else if (value) {\n                        DataUtil.parse.iterateAndReviveJson(value);\n                    }\n                }\n                else {\n                    json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n                }\n            }\n        },\n        /**\n         * It will perform on JSON values\n         * @param  {string} field\n         * @param  {string|Date} value\n         * @hidden\n         */\n        jsonReviver: function (field, value) {\n            var dupValue = value;\n            if (typeof value === 'string') {\n                var ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    return DataUtil.parse.jsonReplacer({ value: new Date(parseInt(ms[1], 10)) }, false).value;\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    var arr = dupValue.split(/[^0-9]/);\n                    value = DataUtil.parse.jsonReplacer({\n                        value: new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10))\n                    }, false).value;\n                }\n            }\n            return value;\n        },\n        /**\n         * Check wheather the given value is JSON or not.\n         * @param  {Object[]} jsonData\n         */\n        isJson: function (jsonData) {\n            if (typeof jsonData[0] === 'string') {\n                return jsonData;\n            }\n            return DataUtil.parse.parseJson(jsonData);\n        },\n        /**\n         * Checks wheather the given value is GUID or not.\n         * @param  {string} value\n         */\n        isGuid: function (value) {\n            var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n            var match = regex.exec(value);\n            return match != null;\n        },\n        /**\n         * The method used to replace the value based on the type.\n         * @param  {Object} value\n         * @param  {boolean} stringify\n         * @hidden\n         */\n        replacer: function (value, stringify) {\n            if (DataUtil.isPlainObject(value)) {\n                return DataUtil.parse.jsonReplacer(value, stringify);\n            }\n            if (value instanceof Array) {\n                return DataUtil.parse.arrayReplacer(value);\n            }\n            if (value instanceof Date) {\n                return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n            }\n            return value;\n        },\n        /**\n         * It will replace the JSON value.\n         * @param  {string} key\n         * @param  {Object} val\n         * @hidden\n         */\n        jsonReplacer: function (val, stringify) {\n            if (stringify === void 0) { stringify = true; }\n            var value;\n            var keys = Object.keys(val);\n            for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {\n                var prop = keys_3[_i];\n                value = val[prop];\n                if (!(value instanceof Date)) {\n                    continue;\n                }\n                var d = value;\n                var unixstamp = +d - (d.getTimezoneOffset() * 60000);\n                val[prop] = new Date(unixstamp - (DataUtil.serverTimezoneOffset * 3600000));\n                if (stringify) {\n                    val[prop] = val[prop].toJSON();\n                }\n            }\n            return val;\n        },\n        /**\n         * It will replace the Array of value.\n         * @param  {string} key\n         * @param  {Object[]} val\n         * @hidden\n         */\n        arrayReplacer: function (val) {\n            for (var i = 0; i < val.length; i++) {\n                if (DataUtil.isPlainObject(val[i])) {\n                    val[i] = DataUtil.parse.jsonReplacer(val[i]);\n                }\n                else if (val[i] instanceof Date) {\n                    val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n                }\n            }\n            return val;\n        }\n    };\n    return DataUtil;\n}());\nexport { DataUtil };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { merge, extend, isNullOrUndefined, setValue, getValue } from '@syncfusion/ej2-base';\nimport { DataUtil } from './util';\nimport { Query, Predicate } from './query';\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nvar Adaptor = /** @class */ (function () {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    function Adaptor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    Adaptor.prototype.processResponse = function (data, ds, query, xhr) {\n        return data;\n    };\n    return Adaptor;\n}());\nexport { Adaptor };\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nvar JsonAdaptor = /** @class */ (function (_super) {\n    __extends(JsonAdaptor, _super);\n    function JsonAdaptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    JsonAdaptor.prototype.processQuery = function (dataManager, query) {\n        var result = dataManager.dataSource.json.slice(0);\n        var count = result.length;\n        var countFlg = true;\n        var ret;\n        var key;\n        var agg = {};\n        for (var i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    };\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    JsonAdaptor.prototype.batchRequest = function (dm, changes, e) {\n        var i;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < changes.deletedRecords.length; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    };\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    JsonAdaptor.prototype.onWhere = function (ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter(function (obj) {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    };\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    JsonAdaptor.prototype.onAggregates = function (ds, e) {\n        var fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    };\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    JsonAdaptor.prototype.onSearch = function (ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter(function (obj) {\n            for (var j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    };\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    JsonAdaptor.prototype.onSortBy = function (ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        var fnCompare;\n        var field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (var i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    };\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    JsonAdaptor.prototype.onGroup = function (ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        var aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        var agg = [];\n        if (aggQuery.length) {\n            var tmp = void 0;\n            for (var i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    };\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    JsonAdaptor.prototype.onPage = function (ds, e, query) {\n        var size = DataUtil.getValue(e.pageSize, query);\n        var start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        var end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    };\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    JsonAdaptor.prototype.onRange = function (ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    };\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    JsonAdaptor.prototype.onTake = function (ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    };\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    JsonAdaptor.prototype.onSkip = function (ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    };\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    JsonAdaptor.prototype.onSelect = function (ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    };\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    JsonAdaptor.prototype.insert = function (dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    };\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    JsonAdaptor.prototype.remove = function (dm, keyField, value, tableName) {\n        var ds = dm.dataSource.json;\n        var i;\n        if (typeof value === 'object') {\n            value = value[keyField];\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (ds[i][keyField] === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    };\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    JsonAdaptor.prototype.update = function (dm, keyField, value, tableName) {\n        var ds = dm.dataSource.json;\n        var i;\n        var key = value[keyField];\n        for (i = 0; i < ds.length; i++) {\n            if (ds[i][keyField] === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    };\n    return JsonAdaptor;\n}(Adaptor));\nexport { JsonAdaptor };\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nvar UrlAdaptor = /** @class */ (function (_super) {\n    __extends(UrlAdaptor, _super);\n    function UrlAdaptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    UrlAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {\n        var queries = this.getQueryRequest(query);\n        var singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        var params = query.params;\n        var url = dm.dataSource.url;\n        var temp;\n        var skip;\n        var take = null;\n        var options = this.options;\n        var request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (var i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (var i = 0; i < queries.filters.length; i++) {\n            request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query));\n            var keys_1 = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (var _i = 0, keys_2 = keys_1; _i < keys_2.length; _i++) {\n                var prop = keys_2[_i];\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (var i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (var i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (var i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        var req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        // cleanup\n        var keys = Object.keys(req);\n        for (var _a = 0, keys_3 = keys; _a < keys_3.length; _a++) {\n            var prop = keys_3[_a];\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        var p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    };\n    UrlAdaptor.prototype.getRequestQuery = function (options, query, singles, request, request1) {\n        var param = 'param';\n        var req = request1;\n        req[options.from] = query.fromTable;\n        if (options.expand) {\n            req[options.expand] = query.expands;\n        }\n        req[options.select] = 'onSelect' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    };\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    UrlAdaptor.prototype.convertToQueryString = function (request, query, dm) {\n        return '';\n        // this needs to be overridden\n    };\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    UrlAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {\n        var requests = request;\n        var pvt = requests.pvtData || {};\n        var groupDs = data.groupDs;\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        var d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        var args = {};\n        if ('count' in data) {\n            args.count = data.count;\n        }\n        args.result = data.result ? data.result : data;\n        this.getAggregateResult(pvt, data, args, groupDs);\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    };\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    UrlAdaptor.prototype.onGroup = function (e) {\n        this.pvt.groups = e;\n        return e;\n    };\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    UrlAdaptor.prototype.onAggregates = function (e) {\n        this.pvt.aggregates = e;\n    };\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    UrlAdaptor.prototype.batchRequest = function (dm, changes, e) {\n        var url;\n        var key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify({\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            })\n        };\n    };\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    UrlAdaptor.prototype.beforeSend = function (dm, request) {\n        // need to extend this method\n    };\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    UrlAdaptor.prototype.insert = function (dm, data, tableName) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify({\n                value: data,\n                table: tableName,\n                action: 'insert'\n            })\n        };\n    };\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    UrlAdaptor.prototype.remove = function (dm, keyField, value, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify({\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            })\n        };\n    };\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    UrlAdaptor.prototype.update = function (dm, keyField, value, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify({\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: value[keyField],\n                table: tableName\n            })\n        };\n    };\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    UrlAdaptor.prototype.getFiltersFrom = function (data, query) {\n        var key = query.fKey;\n        var value;\n        var prop = key;\n        var pKey = query.key;\n        var predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (var i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    };\n    UrlAdaptor.prototype.getAggregateResult = function (pvt, data, args, groupDs) {\n        var pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            var agg = pvt.aggregates;\n            var fn = void 0;\n            var aggregateData = pData;\n            var res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (var i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        if (pvt && pvt.groups && pvt.groups.length) {\n            var groups = pvt.groups;\n            for (var i = 0; i < groups.length; i++) {\n                var level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs);\n            }\n            args.result = pData;\n        }\n        return args;\n    };\n    UrlAdaptor.prototype.getQueryRequest = function (query) {\n        var req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    };\n    UrlAdaptor.prototype.addParams = function (options) {\n        var req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (var _i = 0, _a = options.params; _i < _a.length; _i++) {\n            var tmp = _a[_i];\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    };\n    return UrlAdaptor;\n}(Adaptor));\nexport { UrlAdaptor };\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nvar ODataAdaptor = /** @class */ (function (_super) {\n    __extends(ODataAdaptor, _super);\n    function ODataAdaptor() {\n        var _this = _super.call(this) || this;\n        // options replaced the default adaptor options\n        _this.options = extend({}, _this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 '\n        });\n        _this.getModuleName = getValue('getModulename', _this);\n        return _this;\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    ODataAdaptor.prototype.onPredicate = function (predicate, query, requiresCast) {\n        var returnValue = '';\n        var operator;\n        var guid;\n        var val = predicate.value;\n        var type = typeof val;\n        var field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName)) {\n            if (this.getModuleName() === 'ODataV4Adaptor') {\n                operator = DataUtil.odv4UniOperator[predicate.operator];\n            }\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            var temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    };\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    ODataAdaptor.prototype.onComplexPredicate = function (predicate, query, requiresCast) {\n        var res = [];\n        for (var i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    };\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    ODataAdaptor.prototype.onEachWhere = function (filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    };\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    ODataAdaptor.prototype.onWhere = function (filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    };\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    ODataAdaptor.prototype.onEachSearch = function (e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        var filter = this.pvt.search || [];\n        for (var i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    };\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    ODataAdaptor.prototype.onSearch = function (e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    };\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    ODataAdaptor.prototype.onEachSort = function (e) {\n        var res = [];\n        if (e.name instanceof Array) {\n            for (var i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    };\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    ODataAdaptor.prototype.onSortBy = function (e) {\n        return e.reverse().join(',');\n    };\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    ODataAdaptor.prototype.onGroup = function (e) {\n        this.pvt.groups = e;\n        return [];\n    };\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    ODataAdaptor.prototype.onSelect = function (e) {\n        for (var i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    };\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    ODataAdaptor.prototype.onAggregates = function (e) {\n        this.pvt.aggregates = e;\n        return '';\n    };\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    ODataAdaptor.prototype.onCount = function (e) {\n        return e === true ? 'allpages' : '';\n    };\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    ODataAdaptor.prototype.beforeSend = function (dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    };\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    ODataAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {\n        var pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            var dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            var metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (var i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        var pvt = request && request[pvtData];\n        var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        var count = null;\n        var version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            var oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        var args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    };\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    ODataAdaptor.prototype.convertToQueryString = function (request, query, dm) {\n        var res = [];\n        var table = 'table';\n        var tableName = request[table] || '';\n        var format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        var keys = Object.keys(request);\n        for (var _i = 0, keys_4 = keys; _i < keys_4.length; _i++) {\n            var prop = keys_4[_i];\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    };\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    ODataAdaptor.prototype.insert = function (dm, data, tableName) {\n        return {\n            url: dm.dataSource.url.replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data)\n        };\n    };\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    ODataAdaptor.prototype.remove = function (dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url.replace(/\\/*$/, tableName ? '/' + tableName : '') + '(' + value + ')'\n        };\n    };\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    ODataAdaptor.prototype.update = function (dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url.replace(/\\/*$/, tableName ? '/' + tableName : '') + '(' + value[keyField] + ')',\n            data: JSON.stringify(value),\n            accept: this.options.accept\n        };\n    };\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    ODataAdaptor.prototype.batchRequest = function (dm, changes, e) {\n        var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        var url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        var args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        var req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args);\n        req += this.generateUpdateRequest(changes.changedRecords, args);\n        req += this.generateDeleteRequest(changes.deletedRecords, args);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    };\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    ODataAdaptor.prototype.generateDeleteRequest = function (arr, e) {\n        if (!arr) {\n            return '';\n        }\n        var req = '';\n        var stat = {\n            'method': 'DELETE ',\n            'url': function (data, i, key) { return '(' + data[i][key] + ')'; },\n            'data': function (data, i) { return ''; }\n        };\n        req = this.generateBodyContent(arr, e, stat);\n        return req + '\\n';\n    };\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    ODataAdaptor.prototype.generateInsertRequest = function (arr, e) {\n        if (!arr) {\n            return '';\n        }\n        var req = '';\n        var stat = {\n            'method': 'POST ',\n            'url': function (data, i, key) { return ''; },\n            'data': function (data, i) { return JSON.stringify(data[i]) + '\\n\\n'; }\n        };\n        req = this.generateBodyContent(arr, e, stat);\n        return req;\n    };\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    ODataAdaptor.prototype.generateUpdateRequest = function (arr, e) {\n        if (!arr) {\n            return '';\n        }\n        var req = '';\n        var stat = {\n            'method': 'PUT ',\n            'url': function (data, i, key) { return '(' + data[i][key] + ')'; },\n            'data': function (data, i) { return JSON.stringify(data[i]) + '\\n\\n'; }\n        };\n        req = this.generateBodyContent(arr, e, stat);\n        return req;\n    };\n    ODataAdaptor.getField = function (prop) {\n        return prop.replace(/\\./g, '/');\n    };\n    ODataAdaptor.prototype.generateBodyContent = function (arr, e, stat) {\n        var req = '';\n        for (var i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            req += e.url + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n\\n';\n            req += stat.data(arr, i);\n        }\n        return req;\n    };\n    ODataAdaptor.prototype.processBatchResponse = function (data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            var guid = xhr.getResponseHeader('Content-Type');\n            var cIdx = void 0;\n            var jsonObj = void 0;\n            var d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            var exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            var changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (var i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    };\n    return ODataAdaptor;\n}(UrlAdaptor));\nexport { ODataAdaptor };\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nvar ODataV4Adaptor = /** @class */ (function (_super) {\n    __extends(ODataV4Adaptor, _super);\n    function ODataV4Adaptor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // options replaced the default adaptor options\n        _this.options = extend({}, _this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 '\n        });\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    ODataV4Adaptor.prototype.getModulename = function () {\n        return 'ODataV4Adaptor';\n    };\n    ;\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    ODataV4Adaptor.prototype.onCount = function (e) {\n        return e === true ? 'true' : '';\n    };\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    ODataV4Adaptor.prototype.onPredicate = function (predicate, query, requiresCast) {\n        var returnValue = '';\n        var val = predicate.value;\n        var isDate = val instanceof Date;\n        returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        return returnValue;\n    };\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    ODataV4Adaptor.prototype.onEachSearch = function (e) {\n        var search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    };\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    ODataV4Adaptor.prototype.onSearch = function (e) {\n        return this.pvt.searches.join(' OR ');\n    };\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    ODataV4Adaptor.prototype.beforeSend = function (dm, request, settings) {\n        request.setRequestHeader('Accept', this.options.accept);\n    };\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    ODataV4Adaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {\n        var pvtData = 'pvtData';\n        var pvt = request && request[pvtData];\n        var emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        var count = null;\n        var dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = data.value;\n        var args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    };\n    return ODataV4Adaptor;\n}(ODataAdaptor));\nexport { ODataV4Adaptor };\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nvar WebApiAdaptor = /** @class */ (function (_super) {\n    __extends(WebApiAdaptor, _super);\n    function WebApiAdaptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    WebApiAdaptor.prototype.insert = function (dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    };\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    WebApiAdaptor.prototype.remove = function (dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    };\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    WebApiAdaptor.prototype.update = function (dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    };\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    WebApiAdaptor.prototype.beforeSend = function (dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    };\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    WebApiAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {\n        var pvtData = 'pvtData';\n        var pvt = request && request[pvtData];\n        var count = null;\n        var args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            var version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    };\n    return WebApiAdaptor;\n}(ODataAdaptor));\nexport { WebApiAdaptor };\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nvar WebMethodAdaptor = /** @class */ (function (_super) {\n    __extends(WebMethodAdaptor, _super);\n    function WebMethodAdaptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    WebMethodAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {\n        var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        var getData = 'data';\n        var data = DataUtil.parse.parseJson(obj[getData]);\n        var result = {};\n        var value = 'value';\n        if (data.param) {\n            for (var i = 0; i < data.param.length; i++) {\n                var param = data.param[i];\n                var key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        var pvtData = 'pvtData';\n        var url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    };\n    return WebMethodAdaptor;\n}(UrlAdaptor));\nexport { WebMethodAdaptor };\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nvar RemoteSaveAdaptor = /** @class */ (function (_super) {\n    __extends(RemoteSaveAdaptor, _super);\n    /**\n     * @hidden\n     */\n    function RemoteSaveAdaptor() {\n        var _this = _super.call(this) || this;\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, _this);\n        setValue('insert', UrlAdaptor.prototype.insert, _this);\n        setValue('update', UrlAdaptor.prototype.update, _this);\n        setValue('remove', UrlAdaptor.prototype.remove, _this);\n        return _this;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    RemoteSaveAdaptor.prototype.batchRequest = function (dm, changes, e) {\n        var i;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            JsonAdaptor.prototype.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            JsonAdaptor.prototype.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < changes.deletedRecords.length; i++) {\n            JsonAdaptor.prototype.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify({\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            })\n        };\n    };\n    return RemoteSaveAdaptor;\n}(JsonAdaptor));\nexport { RemoteSaveAdaptor };\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nvar CacheAdaptor = /** @class */ (function (_super) {\n    __extends(CacheAdaptor, _super);\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    function CacheAdaptor(adaptor, timeStamp, pageSize) {\n        var _this = _super.call(this) || this;\n        _this.isCrudAction = false;\n        _this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            _this.cacheAdaptor = adaptor;\n        }\n        _this.pageSize = pageSize;\n        _this.guidId = DataUtil.getGuid('cacheAdaptor');\n        var obj = { keys: [], results: [] };\n        window.localStorage.setItem(_this.guidId, JSON.stringify(obj));\n        var guid = _this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(function () {\n                var data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                var forDel = [];\n                for (var i = 0; i < data.results.length; i++) {\n                    var currentTime = +new Date();\n                    var requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (var i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n        return _this;\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    CacheAdaptor.prototype.generateKey = function (url, query) {\n        var queries = this.getQueryRequest(query);\n        var singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        var key = url;\n        var page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach(function (obj) {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach(function (obj) {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach(function (obj) {\n            key += obj.e.searchKey;\n        });\n        for (var filter = 0; filter < queries.filters.length; filter++) {\n            var currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                var newQuery = query.clone();\n                newQuery.queries = [];\n                for (var i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    };\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    CacheAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {\n        var key = this.generateKey(dm.dataSource.url, query);\n        var cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    };\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    CacheAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        var obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        var index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    };\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    CacheAdaptor.prototype.beforeSend = function (dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    };\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    CacheAdaptor.prototype.update = function (dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    };\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    CacheAdaptor.prototype.insert = function (dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    };\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    CacheAdaptor.prototype.remove = function (dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    };\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    CacheAdaptor.prototype.batchRequest = function (dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    };\n    return CacheAdaptor;\n}(UrlAdaptor));\nexport { CacheAdaptor };\n","import { Ajax } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataUtil } from './util';\nimport { Query } from './query';\nimport { ODataAdaptor, JsonAdaptor, CacheAdaptor, RemoteSaveAdaptor } from './adaptors';\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nvar DataManager = /** @class */ (function () {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    function DataManager(dataSource, query, adaptor) {\n        var _this = this;\n        /** @hidden */\n        this.dateParse = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        var data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then(function (e) {\n                _this.dataSource.offline = true;\n                _this.isDataAvailable = true;\n                data.json = e.result;\n                _this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    DataManager.prototype.setDefaultQuery = function (query) {\n        this.defaultQuery = query;\n        return this;\n    };\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    DataManager.prototype.executeLocal = function (query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        var result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            var from = query.subQuery.fromTable;\n            var lookup = query.subQuery.lookups;\n            var res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (var j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    };\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    DataManager.prototype.executeQuery = function (query, done, fail, always) {\n        var _this = this;\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        var deffered = new Deferred();\n        var args = { query: query };\n        if (!this.dataSource.offline && this.dataSource.url !== undefined) {\n            var result = this.adaptor.processQuery(this, query);\n            this.makeRequest(result, deffered, args, query);\n        }\n        else {\n            DataManager.nextTick(function () {\n                var res = _this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        return deffered.promise;\n    };\n    DataManager.getDeferedArgs = function (query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    };\n    DataManager.nextTick = function (fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    };\n    DataManager.prototype.extendRequest = function (url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    };\n    DataManager.prototype.makeRequest = function (url, deffered, args, query) {\n        var _this = this;\n        var isSelector = !!query.subQuerySelector;\n        var fnFail = function (e) {\n            args.error = e;\n            deffered.reject(args);\n        };\n        var process = function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        var fnQueryChild = function (data, selector) {\n            var subDeffer = new Deferred();\n            var childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);\n            var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then(function (subData) {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        var fnSuccess = function (data, request) {\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && _this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            var result = _this.adaptor.processResponse(data, _this, query, request.httpRequest, request);\n            var count = 0;\n            var aggregates = null;\n            var virtualSelectRecords = 'virtualSelectRecords';\n            var virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        var req = this.extendRequest(url, fnSuccess, fnFail);\n        var ajax = new Ajax(req);\n        ajax.beforeSend = function () {\n            _this.beforeSend(ajax.httpRequest, ajax);\n        };\n        req = ajax.send();\n        req.catch(function (e) { return true; }); // to handle failure remote requests.        \n        this.requests.push(ajax);\n        if (isSelector) {\n            var promise = void 0;\n            var res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then(function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var result = args[0];\n                    var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].httpRequest, _this.requests[0]);\n                    var count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].httpRequest, _this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, _this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    };\n    DataManager.prototype.beforeSend = function (request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        var headers = this.dataSource.headers;\n        var props;\n        for (var i = 0; headers && i < headers.length; i++) {\n            props = [];\n            var keys = Object.keys(headers[i]);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var prop = keys_1[_i];\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    };\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.saveChanges = function (changes, key, tableName, query) {\n        var _this = this;\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        var req = this.adaptor.batchRequest(this, changes, args, query);\n        if (this.dataSource.offline) {\n            return req;\n        }\n        var deff = new Deferred();\n        var ajax = new Ajax(req);\n        ajax.beforeSend = function () {\n            _this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = function (data, request) {\n            deff.resolve(_this, [_this.adaptor.processResponse(data, _this, null, request.httpRequest, request, changes)]);\n        };\n        ajax.onFailure = function (e) {\n            deff.reject([{ error: e }]);\n        };\n        ajax.send().catch(function (e) { return true; }); // to handle the failure requests.        \n        return deff.promise;\n    };\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.insert = function (data, tableName, query, position) {\n        data = DataUtil.parse.replacer(data);\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var req = this.adaptor.insert(this, data, tableName, query, position);\n        if (this.dataSource.offline) {\n            return req;\n        }\n        return this.doAjaxRequest(req);\n    };\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.remove = function (keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = value[keyField];\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var res = this.adaptor.remove(this, keyField, value, tableName, query);\n        if (this.dataSource.offline) {\n            return res;\n        }\n        return this.doAjaxRequest(res);\n    };\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.update = function (keyField, value, tableName, query) {\n        value = DataUtil.parse.replacer(value, !this.dataSource.offline);\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var res = this.adaptor.update(this, keyField, value, tableName, query);\n        if (this.dataSource.offline) {\n            return res;\n        }\n        return this.doAjaxRequest(res);\n    };\n    DataManager.prototype.doAjaxRequest = function (res) {\n        var _this = this;\n        var defer = new Deferred();\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        var ajax = new Ajax(res);\n        ajax.beforeSend = function () {\n            _this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = function (record, request) {\n            try {\n                DataUtil.parse.parseJson(record);\n            }\n            catch (e) {\n                record = [];\n            }\n            record = _this.adaptor.processResponse(DataUtil.parse.parseJson(record), _this, null, request.httpRequest, request);\n            defer.resolve(_this, [{ record: record, dataManager: _this }]);\n        };\n        ajax.onFailure = function (e) {\n            defer.reject([{ error: e }]);\n        };\n        ajax.send().catch(function (e) { return true; }); // to handle the failure requests.\n        return defer.promise;\n    };\n    return DataManager;\n}());\nexport { DataManager };\n/**\n * Deferred is used to handle asynchronous operation.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n    return Deferred;\n}());\nexport { Deferred };\n"],"names":["Query","from","this","subQuery","isChild","queries","key","fKey","fromTable","Array","lookups","expands","sortedColumns","groupedColumns","params","prototype","setKey","field","using","dataManager","execute","done","fail","always","executeQuery","DataUtil","throwError","executeLocal","clone","cloned","slice","subQuerySelector","isCountRequired","tableName","addParams","value","push","fn","expand","tables","call","where","fieldName","operator","ignoreCase","toLowerCase","predicate","Predicate","e","search","searchKey","fieldNames","comparer","fnOperators","sortBy","isFromGroup","sorts","temp","order","endsWith","replace","fnSort","filterQueries","i","length","j","direction","sortByDesc","group","format","page","pageIndex","pageSize","range","start","end","take","nos","skip","select","hierarchy","query","selectorFn","foreignKey","requiresCount","aggregate","type","name","filter","q","filterQueryLists","singles","filtered","indexOf","res","isComplex","processOperator","condition","predicates","apply","and","args","_i","arguments","combinePredicates","combine","or","fromJson","json","len","fromJSONData","pred","validate","record","isAnd","ret","getObject","toJson","p","preds","consts","GroupGuid","getValue","inst","input","substr","startsWith","fnAscending","fnDescending","x","y","undefined","localeCompare","extractFields","obj","fields","newObj","jsonArray","newData","aggregates","level","groupDs","jsonData","_loop_1","isNullOrUndefined","items","this_1","count","indx","childLevels","grouped","groupedArray","records","_loop_2","val","this_2","getVal","tempObj","_loop_3","aggs","buildHierarchy","source","lookup","pKey","grp","result","fKeyData","getFieldList","prefix","copyObj","keys_1","Object","keys","prop","nameSpace","splits","split","sort","ds","middle","parseInt","toString","left","right","merge","current","shift","array","index","callAdaptorFunction","adaptor","fnName","param1","param2","isnull","isPlainObject","constructor","isCors","xhr","window","getGuid","rand","crypto","arr","Uint8Array","getRandomValues","Math","random","isNull","getItemFromComparer","keyVal","castRequired","distinct","requiresCompleteRecord","tmp","forEach","data","serverTimezoneOffset","error","Error","message","stack","sum","isNaN","average","min","max","truecount","DataManager","falsecount","operatorSymbols","<",">","<=",">=","==","!=","*=","$=","^=","odBiOperator","lessthan","lessthanorequal","greaterthan","greaterthanorequal","equal","notequal","odUniOperator","endswith","startswith","contains","odv4UniOperator","actual","expected","notnull","processSymbols","parse","parseJson","jsonText","JSON","jsonReviver","iterateAndReviveArray","iterateAndReviveJson","test","keys_2","dupValue","ms","exec","jsonReplacer","Date","isJson","isGuid","replacer","stringify","arrayReplacer","keys_3","unixstamp","getTimezoneOffset","toJSON","date","__extends","extendStatics","setPrototypeOf","__proto__","d","b","hasOwnProperty","__","create","Adaptor","options","requestType","dataSource","pvt","processResponse","JsonAdaptor","_super","processQuery","countFlg","agg","batchRequest","dm","changes","addedRecords","insert","changedRecords","update","deletedRecords","remove","onWhere","onAggregates","onSearch","onSortBy","fnCompare","onGroup","aggQuery","onPage","size","onRange","onTake","onSkip","onSelect","position","splice","keyField","UrlAdaptor","hierarchyFilters","getQueryRequest","url","request","groups","filters","searches","getFiltersFrom","req","getRequestQuery","reqParams","_a","pvtData","contentType","convertToQueryString","request1","requests","getResponseHeader","action","getAggregateResult","batchUrl","crudUrl","removeUrl","dataType","changed","added","deleted","table","beforeSend","insertUrl","keyColumn","updateUrl","predicats","pData","aggregateData","ODataAdaptor","_this","extend","accept","multipartAccept","batch","changeSet","batchPre","contentId","batchContent","changeSetContent","batchChangeSetContentType","getModuleName","onPredicate","requiresCast","guid","returnValue","getField","onComplexPredicate","onEachWhere","join","onEachSearch","onEachSort","reverse","onCount","settings","setRequestHeader","overrideMimeType","dataCopy","results","emptyAndBatch","processBatchResponse","versionCheck","version","oDataCount","requiresFormat","keys_4","initialGuid","cid","cSet","generateInsertRequest","generateUpdateRequest","generateDeleteRequest","generateBodyContent","method","stat","cIdx","jsonObj","substring","exVal","changeGuid","ODataV4Adaptor","getModulename","isDate","WebApiAdaptor","Count","Items","WebMethodAdaptor","param","RemoteSaveAdaptor","setValue","CacheAdaptor","timeStamp","isCrudAction","isInsertAction","cacheAdaptor","guidId","localStorage","setItem","setInterval","getItem","forDel","currentTime","requestTime","removeItem","generateKey","currentFilter","newQuery","cachedItems","crossDomain","dateParse","offline","headers","timeTillExpiration","cachingPageSize","enableCaching","jsonp","defaultQuery","isDataAvailable","ready","then","setDefaultQuery","deffered","Deferred","nextTick","getDeferedArgs","resolve","makeRequest","promise","setImmediate","setTimeout","extendRequest","fnSuccess","fnFail","cache","processData","onSuccess","onFailure","isSelector","reject","process","virtualSelectRecords","fnQueryChild","selector","subDeffer","childArgs","parent","subUrl","childReq","subData","httpRequest","virtualRecords","ajax","Ajax","send","catch","Promise","all","pResult","cResult","props","saveChanges","deff","doAjaxRequest","defer","bind"],"mappings":"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"}